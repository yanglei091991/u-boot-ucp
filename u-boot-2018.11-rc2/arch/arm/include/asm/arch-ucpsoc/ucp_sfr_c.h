//******************** (C) COPYRIGHT 2019 SmartLogic*******************************
// FileName           : ucp_sfr_c.h
// Author             : lijian, jian.li@smartlogictech.com
// Date First Issued  : 2019-03-29 04:08:48 PM
// Last Modified      : 2019-05-21 01:51:25 PM
// Description        :
// ------------------------------------------------------------
// Modification History:
// Version    Date       Author    Modification Description
//
//**********************************************************************************
#ifndef __UCP_SFR_C_H__
#define __UCP_SFR_C_H__
#include "ucp_param.h"
//pin mux
#define PIN_MUX_BASE_ADDR      0x020d8000
#define PAD00_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x00*4)))
#define PAD01_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x01*4)))
#define PAD02_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x02*4)))
#define PAD03_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x03*4)))
#define PAD04_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x04*4)))
#define PAD05_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x05*4)))
#define PAD06_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x06*4)))
#define PAD07_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x07*4)))
#define PAD08_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x08*4)))
#define PAD09_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x09*4)))
#define PAD10_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x0a*4)))
#define PAD11_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x0b*4)))
#define PAD12_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x0c*4)))
#define PAD13_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x0d*4)))
#define PAD14_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x0e*4)))
#define PAD15_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x0f*4)))
#define PAD16_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x10*4)))
#define PAD17_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x11*4)))
#define PAD18_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x12*4)))
#define PAD19_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x13*4)))
#define PAD20_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x14*4)))
#define PAD21_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x15*4)))
#define PAD22_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x16*4)))
#define PAD23_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x17*4)))
#define PAD24_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x18*4)))
#define PAD25_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x19*4)))
#define PAD26_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x1a*4)))
#define PAD27_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x1b*4)))
#define PAD28_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x1c*4)))
#define PAD29_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x1d*4)))
#define PAD30_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x1e*4)))
#define PAD31_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x1f*4)))
#define PAD32_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x20*4)))
#define PAD33_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x21*4)))
#define PAD34_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x22*4)))
#define PAD35_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x23*4)))
#define PAD36_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x24*4)))
#define PAD37_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x25*4)))
#define PAD38_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x26*4)))
#define PAD39_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x27*4)))
#define PAD40_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x28*4)))
#define PAD41_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x29*4)))
#define PAD42_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x2a*4)))
#define PAD43_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x2b*4)))
#define PAD44_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x2c*4)))
#define PAD45_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x2d*4)))
#define PAD46_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x2e*4)))
#define PAD47_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x2f*4)))
#define PAD48_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x30*4)))
#define PAD49_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x31*4)))
#define PAD50_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x32*4)))
#define PAD51_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x33*4)))
#define PAD52_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x34*4)))
#define PAD53_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x35*4)))
#define PAD54_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x36*4)))
#define PAD55_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x37*4)))
#define PAD56_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x38*4)))
#define PAD57_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x39*4)))
#define PAD58_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x3a*4)))
#define PAD59_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x3b*4)))
#define PAD60_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x3c*4)))
#define PAD61_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x3d*4)))
#define PAD62_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x3e*4)))
#define PAD63_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x3f*4)))
#define PAD64_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x40*4)))
#define PAD65_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x41*4)))
#define PAD66_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x42*4)))
#define PAD67_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x43*4)))
#define PAD68_CTRL             (*((volatile UINT32 *)(PIN_MUX_BASE_ADDR + 0x44*4)))
//CRG
#define CRG_BASE_ADDR          0x03670000
#define PLL0_CTRL              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x00*4)))
#define PLL0_CONFIG0           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x01*4)))
#define PLL0_CONFIG1           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x02*4)))
#define PLL0_CONFIG2           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x03*4)))
#define PLL0_STAT              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x04*4)))
#define PLL1_CTRL              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x05*4)))
#define PLL1_CONFIG0           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x06*4)))
#define PLL1_CONFIG1           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x07*4)))
#define PLL1_CONFIG2           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x08*4)))
#define PLL1_STAT              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x09*4)))
#define PLL2_CTRL              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x0a*4)))
#define PLL2_CONFIG0           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x0b*4)))
#define PLL2_CONFIG1           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x0c*4)))
#define PLL2_CONFIG2           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x0d*4)))
#define PLL2_STAT              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x0e*4)))
#define PLL3_CTRL              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x0f*4)))
#define PLL3_CONFIG0           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x10*4)))
#define PLL3_CONFIG1           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x11*4)))
#define PLL3_CONFIG2           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x12*4)))
#define PLL3_STAT              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x13*4)))
#define PLL_SEL_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x14*4)))
#define DDRPHY_BYPASSCLK       (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x15*4)))

#define A53SYSCNT_CTRL         (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x1d*4)))
#define A53CORE_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x1e*4)))
#define APEOS_CTRL             (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x1f*4)))
#define APE1S_CTRL             (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x20*4)))
#define RFMS_CTRL              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x21*4)))
#define DMABM_CTRL             (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x22*4)))
#define ARMBM_CTRL             (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x23*4)))
#define PREIBM_CTRL            (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x24*4)))
#define DSPBM_CTRL             (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x25*4)))
#define CPAXI_CTRL             (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x26*4)))
#define HSIOBM_CTRL            (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x27*4)))
#define APHCLK_CTRL            (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x28*4)))
#define CPHCLK_CTRL            (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x29*4)))
#define APSUB0PCLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x2a*4)))
#define APSUB1PCLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x2b*4)))
#define APSUB2PCLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x2c*4)))
#define CPAHBCLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x2d*4)))
#define CPAPBCLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x2e*4)))
#define DMAS0CLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x2f*4)))
#define DMAS1CLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x30*4)))
#define TIMER00CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x31*4)))
#define TIMER01CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x32*4)))
#define TIMER02CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x33*4)))
#define TIMER03CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x34*4)))
#define TIMER04CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x35*4)))
#define TIMER05CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x36*4)))
#define TIMER06CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x37*4)))
#define TIMER07CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x38*4)))
#define TIMER10CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x39*4)))
#define TIMER11CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x3a*4)))
#define TIMER12CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x3b*4)))
#define TIMER13CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x3c*4)))
#define TIMER14CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x3d*4)))
#define TIMER15CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x3e*4)))
#define TIMER16CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x3f*4)))
#define TIMER17CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x40*4)))
#define TIMER20CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x41*4)))
#define TIMER21CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x42*4)))
#define TIMER22CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x43*4)))
#define TIMER23CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x44*4)))
#define TIMER24CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x45*4)))
#define TIMER25CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x46*4)))
#define TIMER26CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x47*4)))
#define TIMER27CLK_CTRL        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x48*4)))
#define UART0CLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x49*4)))
#define UART1CLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x4a*4)))
#define UART2CLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x4b*4)))
#define UART3CLK_CTRL          (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x4c*4)))
#define I2C0CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x4d*4)))
#define I2C1CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x4e*4)))
#define SPI0CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x4f*4)))
#define SPI1CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x50*4)))
#define SPI2CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x51*4)))
#define SPI3CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x52*4)))
#define RTCCLK_CTRL            (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x53*4)))
#define RST_CTRL0              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x54*4)))
#define RST_CTRL1              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x55*4)))
#define RST_CTRL2              (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x56*4)))
#define DDRCSW_RSTCTRL         (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x57*4)))
#define DDRPHY_RSTCTRL0        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x58*4)))
#define DDRPHY_RSTCTRL1        (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x59*4)))
#define DDRCLK_CTRL            (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x5A*4)))
#define USB0CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x5B*4)))
#define USB1CLK_CTRL           (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x5C*4)))
#define GMAC0_TUNINGCLK_CTRL   (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x5D*4)))
#define GMAC0_PTPCLK_CTRL      (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x5E*4)))
#define GMAC1_TUNINGCLK_CTRL   (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x5F*4)))
#define GMAC1_PTPCLK_CTRL      (*((volatile UINT32 *)(CRG_BASE_ADDR + 0x60*4)))

//PMC
#define PMC_BASE_ADDR          0x03680000
#define PMC00_REG              (*((volatile UINT32 *)(PMC_BASE_ADDR + 0x00*4)))
#define PMC01_REG              (*((volatile UINT32 *)(PMC_BASE_ADDR + 0x01*4)))
#define PMC02_REG              (*((volatile UINT32 *)(PMC_BASE_ADDR + 0x02*4)))
#define PMC03_REG              (*((volatile UINT32 *)(PMC_BASE_ADDR + 0x03*4)))
//SYSCFG
#define SYSCFG_BASE_ADDR       0x03690000
#define A53_M3_REMAP           (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x00*4)))
#define A53CORE0_VRBA          (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x01*4)))
#define A53CORE1_VRBA          (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x02*4)))
#define HSIO_MODE_SEL          (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x03*4)))
#define I2C_CFG                (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x04*4)))
#define UART_CFG               (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x05*4)))
#define TIMER_CFG              (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x06*4)))
#define GPIO_CFG               (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x07*4)))
#define RTC_CFG                (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x08*4)))
#define WDT_CFG                (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x09*4)))
#define SM5_CFG                (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x0a*4)))
#define A53_CNTVAL_L           (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x0b*4)))
#define A53_CNTVAL_H           (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x0c*4)))
#define A53_CNTCLKEN           (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x0d*4)))
#define GIC400_USER            (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x0e*4)))
#define GPMC_CFG               (*((volatile UINT32 *)(SYSCFG_BASE_ADDR + 0x0f*4)))
//SYSDBG
#define SYSDBG_BASE_ADDR       0x03720000
#define SYSDBG00_REG           (*((volatile UINT32 *)(SYSDBG_BASE_ADDR + 0x00*4)))
#define SYSDBG01_REG           (*((volatile UINT32 *)(SYSDBG_BASE_ADDR + 0x01*4)))
#define SYSDBG02_REG           (*((volatile UINT32 *)(SYSDBG_BASE_ADDR + 0x02*4)))
#define SYSDBG03_REG           (*((volatile UINT32 *)(SYSDBG_BASE_ADDR + 0x03*4)))

#include "dw_ahb_gpmc.h"
#include "dw_ahb_ictl.h"
#include "dw_apb_gpio.h"
#include "dw_apb_i2c.h"
#include "dw_apb_rtc.h"
#include "dw_apb_spi.h"
#include "dw_apb_timers.h"
#include "dw_apb_uart.h"
#include "dw_apb_wdt.h"
#include "dw_axi_dmac.h"
#include "dw_gmac.h"
#include "gic_400.h"
#include "ape_csu.h"

#define MAXCLK_CFG               (*((volatile unsigned long *)(0x047d0000 + 0x00 )))
#define C2UVM_FLAG               (*((volatile unsigned long *)(0x047d0000 + 0x04 )))
#define UVM2C_FLAG               (*((volatile unsigned long *)(0x047d0000 + 0x08 )))
#define SIMULATION_END           (*((volatile unsigned long *)(0x047d0000 + 0x0C )))
#define C2UVM_BUFFER_LENGTH      (*((volatile unsigned long *)(0x047d0000 + 0x10 )))
#define UVM2C_BUFFER_LENGTH      (*((volatile unsigned long *)(0x047d0000 + 0x14 )))
#define TUBE_C                   (*((volatile unsigned char *)(0x047d0000 + 0x18 )))
#define C2UVM_BUFFER             (*((volatile unsigned long  )(0x047d1000 + 0x00 )))
#define UVM2C_BUFFER             (*((volatile unsigned long  )(0x047d2000 + 0x00 )))

#endif
